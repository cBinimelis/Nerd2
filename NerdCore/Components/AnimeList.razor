@using Microsoft.AspNetCore.Components.Web
@using NerdCore.Models
@using NerdCore.Data
@using Microsoft.JSInterop
@inject IJSRuntime jsRuntime
@inject AnimeService objAnime
@inject AnimeService userAnime
@inject NavigationManager NavigationManager

<div class="uk-section-default">
    <div id="test-filter" class="uk-section uk-light uk-background-cover uk-overflow-hidden uk-flex uk-flex-top" uk-parallax="bgy: -100; sepia: 100;" style="background-image: url(../img/AnimeGuestBG.jpg); height: 70vh">
        <div class="uk-width-1-2@m uk-text-center uk-margin-auto uk-margin-auto-vertical" uk-parallax="target: #test-filter; blur: 0,10;">
            <div class="uk-overlay uk-overlay-primary uk-width-medium">
                <h1>Anime</h1>
            </div>
        </div>
    </div>
</div>


    <div class="uk-section">
        <div class=" uk-container">
            <div class="uk-card uk-card-default">
                <div class="uk-card-body uk-overflow-auto">
                    <div class="uk-grid" uk-flex>
                        <div class="uk-search uk-search-default uk-width-1-2">
                            <div class="uk-inline uk-width-1-2">
                                <span uk-search-icon></span>
                                <input class="uk-search-input" placeholder="Escribe para empezar a buscar" @bind-value="BuscarAnime" @bind-value:event="oninput" />
                            </div>
                        </div>
                        <div class="uk-width-1-2">
                            <button class="btn--add uk-button">crear</button>
                            <button class="btn--add uk-button">pendientes</button>
                        </div>
                    </div>
                    @if (aniObj != null)
                    {
                        <table class="uk-table  uk-table-middle uk-table-divider">
                            <thead>
                                <tr>
                                    <th class="uk-width-medium">Nombre de la Serie</th>
                                    <th>Lanzamiento</th>
                                    <th>Capitulos</th>
                                    <th>Genero</th>
                                    <th>Estado</th>
                                    <th></th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var anime in GetItemsToShow())
                                {
                                    <tr>
                                        <td class="uk-text-truncate">@anime.Nombre</td>
                                        <td class="uk-visible@m"> @anime.Lanzamiento </td>
                                        <td class="uk-visible@m">@anime.Capitulos </td>
                                        <td class="uk-visible@m"> @anime.Genero </td>
                                        <td class="uk-visible@m"> @anime.Estado </td>
                                        <td><a data-toggle="modal" data-target="#animeModal" class="btn--ver uk-button" style="color:white" @onclick="(e => SelectAnime(anime.IdAnime))">ver</a></td>
                                        <td style="@ShowAdded(anime.IdAnime)"><a style="color:white" class="btn--add uk-button" @onclick="(e=>AddAnime(anime.IdAnime))">Agregar</a></td>
                                    </tr>
                                }
                            </tbody>
                            <ul class="uk-pagination " uk-switcher="animation: uk-animation-slide-left-medium, uk-animation-slide-right-medium">
                                <li class="@DisablePrevious" @onclick="MovePrevious"><a><span class="uk-margin-small-right" uk-pagination-previous></span> Previous</a></li>

                                <li class="uk-margin-auto-left @DisableNext" @onclick="MoveNext"><a>Next <span class="uk-margin-small-left" uk-pagination-next></span></a></li>
                                page:
                                <span>@CurrentPage / @NumberOfPages() </span>
                            </ul>
                        </table>
                    }
                    <div class="uk-height-medium">
                        <img class="uk-position-bottom-center" src="img/Logo.png" />
                    </div>
                </div>
            </div>
        </div>
    </div>


@if (selectedAnime != null)
{
    int ID = @selectedAnime.IdAnime;

    <!--Modal: Anime-->

    <div class="modal fade" id="animeModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
         aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
            <div class="modal-content">
                <div class="card bg-dark text-white">
                    <img style="opacity:30%" src="img/anime/@selectedAnime.Imagen" class="card-img" alt="...">
                    <div class="card-img-overlay">
                        <h2 class="uk-light">@selectedAnime.Nombre</h2>
                        <p class="card-text">@selectedAnime.Sinopsis</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <a style="@ShowAdded(ID); color:white" class="btn--add uk-button" @onclick="(e=>AddAnime(ID))">Agregar</a>
                    <a @onclick="(e => ShowDetails(ID))" class="btn--detalles uk-button" style="color:white">Ver</a>
                </div>
            </div>
        </div>
    </div>
}


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code {

    List<VAnime> aniObj;
    List<AnimeUsuario> aniUser;
    int CurrentPage { get; set; } = 1;
    string BuscarAnime { get; set; } = "";
    int RecordsPerPage = 20;
    int TotalPages = 0;

    [Parameter]
    public int Nerd { get; set; }

    protected override async Task OnInitializedAsync()
    {
        aniObj = await Task.Run(() => objAnime.GetAnimes());
        aniUser = await Task.Run(() => userAnime.GetUser());
    }



    VAnime selectedAnime;
    int selectedAnimeId;

    void SelectAnime(int AnimeId)
    {
        selectedAnimeId = AnimeId;
        selectedAnime = aniObj.First(x => x.IdAnime == AnimeId);
    }

    private void ShowDetails(int ID)
    {
        NavigationManager.NavigateTo("Animes/Details/" + ID, true);
    }

    void MoveNext()
    {
        if (CurrentPage < NumberOfPages())
        {
            CurrentPage++;
        }

    }

    void MovePrevious()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
        }
    }

    string DisablePrevious
    {
        get
        {
            if (CurrentPage == 1) { return "disabled"; }
            return "";
        }
    }

    string DisableNext
    {
        get
        {
            if (CurrentPage == NumberOfPages()) { return "disabled"; }
            return "";
        }
    }

    string ShowAdded(int id)
    {
        if (aniUser != null&&Nerd!=0)
        {
            foreach (var user in aniUser)
            {
                if (user.IdAnime == id && user.IdUsuario == Nerd)
                {
                    return "display:none";
                }
                else
                {
                    return "";
                }
            }
        }
        else
        {
            return "display:none";
        }
        return "";
    }

    int NumberOfPages()
    {
        TotalPages = (int)(Math.Ceiling(((double)aniObj.Count / (double)RecordsPerPage)));
        return TotalPages;
    }

    List<VAnime> GetItemsToShow()
    {
        List<VAnime> filterAnime = aniObj.Where(i => i.Nombre.ToLower().Contains(BuscarAnime.ToLower())).ToList();
        int skip = (CurrentPage - 1) * RecordsPerPage;
        return filterAnime.Skip(skip).Take(RecordsPerPage).ToList();
    }


    private async void AddAnime(int ID)
    {
        AnimeUsuario AU = new AnimeUsuario()
        {
            IdAnime = ID,
            IdUsuario = Nerd,
            IdAvanceAnime = 1,
            Nota = "Sin notas adjuntas"
        };
        aniUser.Add(AU);
        if (objAnime.CreateAU(AU))
        {
            await jsRuntime.InvokeVoidAsync("AUAdded");
        }
        else
        {

        }
    }

    public async Task call()
    {
        await jsRuntime.InvokeVoidAsync("ShowAlert");
    }
}




