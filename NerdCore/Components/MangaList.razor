@using Microsoft.AspNetCore.Components.Web
@using NerdCore.Models
@using NerdCore.Data
@using Microsoft.JSInterop
@inject IJSRuntime jsRuntime
@inject ItemService objManga
@inject ItemService userManga
@inject NavigationManager NavigationManager

<div class="uk-section-default">
    <div id="test-filter" class="uk-section uk-light uk-background-cover uk-overflow-hidden uk-flex uk-flex-top" uk-parallax="bgy: -100; sepia: 100;" style="background-image: url(../img/MangaGuestBG.jpg); height: 70vh">
        <div class="uk-width-1-2@m uk-text-center uk-margin-auto uk-margin-auto-vertical" uk-parallax="target: #test-filter; blur: 0,10;">
            <div class="uk-overlay uk-overlay-primary uk-width-medium">
                <h1>Manga</h1>
            </div>
        </div>
    </div>
</div>


<div class="uk-section">
    <div class=" uk-container">
        <div class="uk-card uk-card-default">
            <div class="uk-card-body uk-overflow-auto">
                <div class="uk-grid" uk-flex>
                    <div class="uk-search uk-search-default uk-width-1-2">
                        <div class="uk-inline">
                            <span uk-search-icon></span>
                            <input class="uk-search-input" placeholder="Escribe para empezar a buscar" @bind-value="BuscarManga" @bind-value:event="oninput" />
                        </div>
                    </div>
                    <div class="uk-width-1-2" style="@CheckLogin()">
                        <a href="Mangas/Create" class="btn--add uk-button">crear</a>
                    </div>
                </div>
                @if (mangaObj != null)
                {
                    int TotPages = NumberOfPages();
                    <table class="uk-table  uk-table-middle uk-table-divider">
                        <thead>
                            <tr>
                                <th class="uk-width-medium">Nombre</th>
                                <th class="uk-visible@m">Lanzamiento</th>
                                <th class="uk-visible@m">Capitulos</th>
                                <th class="uk-visible@m">Genero</th>
                                <th class="uk-visible@m">Estado</th>
                                <th></th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var Manga in GetItemsToShow())
                            {
                                <tr>
                                    <td class="uk-text-truncate">@Manga.Nombre</td>
                                    <td class="uk-visible@m"> @Manga.Lanzamiento </td>
                                    <td class="uk-visible@m">@Manga.Tomos </td>
                                    <td class="uk-visible@m"> @Manga.Genero </td>
                                    <td class="uk-visible@m"> @Manga.Estado </td>
                                    <td><a data-toggle="modal" data-target="#MangaModal" class="btn--ver uk-button uk-button-small" style="color:white" @onclick="(e => SelectManga(Manga.IdManga))">ver</a></td>
                                    <td style="@ShowAdded(Manga.IdManga)"><a style="color:white" class="btn--add uk-button uk-button-small" @onclick="(e=>AddManga(Manga.IdManga))">Agregar</a></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div class="uk-flex-center" uk-grid>
                        <ul class="uk-pagination" uk-margin>
                            <li class="@DisablePrevious" @onclick="MovePrevious"><a><span uk-pagination-previous></span> Anterior</a></li>
                            @for (int i = 0; i < TotPages; i++)
                            {
                                int p = i + 1;
                                <li><a @onclick="(e=>MoveToPage(p))">@p</a></li>
                            }
                            <li class="uk-margin-auto-left @DisableNext" @onclick="MoveNext"><a>Siguiente <span uk-pagination-next></span></a></li>
                        </ul>
                    </div>
                }
                <div class="uk-height-medium">
                    <img class="uk-position-bottom-center" src="img/Logo.png" />
                </div>
            </div>
        </div>
    </div>
</div>


@if (selectedManga != null)
{
    int ID = @selectedManga.IdManga;

    <!--Modal: Manga-->

    <div class="modal fade" id="MangaModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
         aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
            <div class="modal-content">
                <div class="card bg-dark text-white">
                    <img style="opacity:30" src="img/Manga/@selectedManga.Imagen" class="card-img" alt="...">
                    <div class="card-img-overlay uk-overlay-primary">
                        <h2 class="uk-light">@selectedManga.Nombre</h2>
                        <p class="card-text">@selectedManga.Sinopsis</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <a style="@ShowAdded(ID); color:white" class="btn--add uk-button" @onclick="(e=>AddManga(ID))">Agregar</a>
                    <a @onclick="(e => ShowDetails(ID))" class="btn--detalles uk-button" style="color:white">Ver</a>
                </div>
            </div>
        </div>
    </div>
}


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code {

    List<VManga> mangaObj;
    List<MangaUsuario> mangaUser;
    int CurrentPage { get; set; } = 1;
    string BuscarManga { get; set; } = "";
    int RecordsPerPage = 20;
    int TotalPages = 0;

    [Parameter]
    public int Nerd { get; set; }

    protected override async Task OnInitializedAsync()
    {
        mangaObj = await Task.Run(() => objManga.GetMangas());
        mangaUser = await Task.Run(() => userManga.GetManUser());
    }



    VManga selectedManga;
    int selectedMangaId;

    void SelectManga(int MangaId)
    {
        selectedMangaId = MangaId;
        selectedManga = mangaObj.First(x => x.IdManga == MangaId);
    }

    private void ShowDetails(int ID)
    {
        NavigationManager.NavigateTo("Mangas/Details/" + ID, true);
    }

    void MoveNext()
    {
        if (CurrentPage < NumberOfPages())
        {
            CurrentPage++;
        }

    }

    void MovePrevious()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
        }
    }

    void MoveToPage(int page)
    {
        if (CurrentPage > 1 || CurrentPage < NumberOfPages())
        {
            CurrentPage = page;
        }
    }

    string DisablePrevious
    {
        get
        {
            if (CurrentPage == 1) { return "disabled"; }
            return "";
        }
    }

    string DisableNext
    {
        get
        {
            if (CurrentPage == NumberOfPages()) { return "disabled"; }
            return "";
        }
    }

    string ShowAdded(int id)
    {
        if (mangaUser != null && Nerd != 0)
        {
            foreach (var user in mangaUser)
            {
                if (user.IdManga == id && user.IdUsuario == Nerd)
                {
                    return "display:none";
                }
                else
                {
                    return "";
                }
            }
        }
        else
        {
            return "display:none";
        }
        return "";
    }

    string CheckLogin()
    {
        if (Nerd == 0)
        {
            return "display:none";
        }
        return "";
    }

    int NumberOfPages()
    {
        TotalPages = (int)(Math.Ceiling(((double)mangaObj.Count / (double)RecordsPerPage)));
        return TotalPages;
    }

    List<VManga> GetItemsToShow()
    {
        List<VManga> filterManga = mangaObj.Where(i => i.Nombre.ToLower().Contains(BuscarManga.ToLower())).ToList();
        int skip = (CurrentPage - 1) * RecordsPerPage;
        return filterManga.Skip(skip).Take(RecordsPerPage).ToList();
    }


    private async void AddManga(int ID)
    {
        MangaUsuario MU = new MangaUsuario()
        {
            IdManga = ID,
            IdUsuario = Nerd,
            IdAvanceManga = 1,
            Nota = "Sin notas adjuntas"
        };
        mangaUser.Add(MU);
        if (objManga.CreateMU(MU))
        {
            await jsRuntime.InvokeVoidAsync("AUAdded");
        }
        else
        {

        }
    }

    public async Task call()
    {
        await jsRuntime.InvokeVoidAsync("ShowAlert");
    }
}




